import forge from 'node-forge';

const derHex = '308203c5308202ada00302010202144d89920d9dd21a96fd1485e2448efeeb56b6872c300d06092a864886f70d01010b050030818a310b300906035504061302524f3110300e06035504080c07526f6d616e69613112301006035504070c094275637572657374693110300e060355040a0c07457520636f7270310d300b060355040b0c04746573743113301106035504030c0a546573742d47726f7570311f301d06092a864886f70d010901161074657374406578616d706c652e636f6d301e170d3235303331303135353034385a170d3335303331323135353034385a30818a310b300906035504061302524f3110300e06035504080c07526f6d616e69613112301006035504070c094275637572657374693110300e060355040a0c07457520636f7270310d300b060355040b0c04746573743113301106035504030c0a546573742d47726f7570311f301d06092a864886f70d010901161074657374406578616d706c652e636f6d30820122300d06092a864886f70d01010105000382010f003082010a0282010100d127d14ba6eddba78e8f8612199b2541fa77d392f645cb6275b7aed54f1ed333ab2b8a5717462f4bba400cfaaf33a837618c31e7b1a67e2d3f1b36308d023a40589335bbf14d50bdbf2df339886d0d3c74ee88bd3a0b577d1e189b94f5c816a611baabf24fcadf8509c5b31d1d923f320120a68c1a694d88866553ca0c3da0890580a0ece1727fc6eb070a596d861df2066c03605742d9fda2e8a5ce023b660a33b1018eb1df6eaa2927c41a4537b70d388598ada49c8a6840eb2a58841064358cef5374a291317329d7806ea94a0088218d907e010d40518c13e29013f081ab57204679b6bd244679f90afda4090e5690754026bd790bbbea29d850c70dd6d90203010001a321301f301d0603551d0e04160414977d9b3e457e1abf33c2a4d498d4fe9115680837300d06092a864886f70d01010b050003820101003d30817adabe64b172dc5d4ec8f860b19dd0a233edf67b081c50366f4c47dd389b36325cc85fd8944ee21a825728c3c07ef126a02f6f61426133ec6a34cb39963bf8ef11a94d070d49217280519a0caa17fadb73b7da5e376092fe9082143d4de2c214fb85367adff5d96dbab38d8ad802d062449c0e39eeb505441e93d1cdefba3168fd67140096de6acaa36237a220eaa45eda7db3d0dbc7b2eff82575cb27ca1e78593eefec0938e099e746ecd63d20c13ede77957bcb7f9ee38ff5fb9c68db3df8031c3a8c755dd348cf8c5eddddf1e633b1212873a7049b3ed2df21a296529d970880ede9e691b906ad129daa5965a2c5f200840dba36132f8565b8b087';
const sigHex = 'ae52281ee6c4e7313853ff980799442619ebbaad86ca8b4454fa9c620b73d9f1905ebea81965e5774dfbcfb00b51827740d112db0e6e8f505c84e0d483be53101e699bdf36cc22f0b82ac58f04be7a3c83ca79467deef9059821e0493d7bc16d3d2e4a49901d60e964e35a039fe2f4a8baf8256fe07fe3184c7855119eb60e93ac462cf9ac4ae541f1be55e83f959a06e78f999f92b1b2350b1f97368890590508ac12e5acf897698ab368b3c48bc26c5200cf9e7f79bb2768b408de6c6322ca17135fe4204047e3ad405dea5455a13d2cb30b0c515ac571ec73499dcac74906b15462d86d5191d8f55aa8a3b2c3ab0a36744013f5d71eb77a4b9d54d3774514';
const messageSigned = 'hello world';

console.log('Certificate hex length:', derHex.length);
console.log('Signature hex length:', sigHex.length);

try {
  const derBytes = forge.util.hexToBytes(derHex);
  console.log('DER bytes length:', derBytes.length);
  
  const asn1Obj = forge.asn1.fromDer(derBytes);
  const cert = forge.pki.certificateFromAsn1(asn1Obj);
  
  const md = forge.md.sha256.create();
  
  const publicKey = cert.publicKey;
  const signatureBytes = forge.util.hexToBytes(sigHex);
  md.update(messageSigned, 'utf8');

  console.log('Message:', md.digest().toHex());
  
  const verified = publicKey.verify(md.digest().bytes(), signatureBytes);
  
  console.log('Signature verification:', verified ? 'succeeded' : 'failed');
  
  console.log('Certificate Subject:', cert.subject.attributes.map(a => `${a.shortName || a.name}=${a.value}`).join(', '));
  console.log('Certificate Issuer:', cert.issuer.attributes.map(a => `${a.shortName || a.name}=${a.value}`).join(', '));
  console.log('Serial Number:', cert.serialNumber);
  console.log('Valid From:', cert.validity.notBefore);
  console.log('Valid To:', cert.validity.notAfter);
  console.log('Signature Algorithm OID:', cert.siginfo.algorithmOid);
} catch (err) {
  console.error('Error during processing:', err);
}
